@knowledge_agent.tool
async def knowledge_search(ctx: RunContext[GlobalState], query: str) -> KnowledgeSearchResult:
    """
    Busca cualquier informaci√≥n (servicios, ubicaci√≥n, horarios, contacto, etc.) usando b√∫squeda sem√°ntica.
    Si encuentra informaci√≥n relevante, la devuelve. Si no, ofrece escalaci√≥n a asesor.
    """
    state = ctx.deps
    organization_id = state.get("organization_id")
    
    if not organization_id:
        return KnowledgeSearchResult(clarification_message="Error: No se pudo identificar la organizaci√≥n.")
    
    print(f"üîç Buscando informaci√≥n para: '{query}' en organizaci√≥n {organization_id}")
    
    try:
        # Buscar con l√≠mite de 3 resultados m√°s relevantes
        matching_results = await search_knowledge_semantic(query, organization_id, limit=3)
        
        if not matching_results:
            return KnowledgeSearchResult(
                clarification_message=f"No encontr√© informaci√≥n espec√≠fica sobre '{query}'. ¬øTe gustar√≠a hablar con un asesor que pueda ayudarte mejor?"
            )
        
        # Tomar el resultado m√°s relevante (primero)
        best_result = matching_results[0]
        metadata = best_result.get('metadata', {})
        source_type = metadata.get('source_type')
        content = best_result.get('content', '')
        similarity = best_result.get('similarity', 0)
        
        print(f"‚úÖ Informaci√≥n encontrada: source_type={source_type}, similarity={similarity:.2f}")
        print(f"üìÑ Content preview: {content[:100]}...")
        
        if source_type == 'file':
            # Es informaci√≥n general (ubicaci√≥n, horarios, etc.)
            return KnowledgeSearchResult(
                information_found=content,
                source_type='file',
                category=metadata.get('category', 'general')
            )
        
        elif source_type == 'service':
            # Es informaci√≥n de un servicio
            service_id = metadata.get('service_id')
            service_data = await get_service_by_id(service_id)
            return KnowledgeSearchResult(
                service_id=service_id,
                service_name=service_data['name'] if service_data else None,
                requires_assessment=service_data['requiere_valoracion'] if service_data else None,
                source_type='service'
            )
        
        else:
            # Tipo de fuente desconocido, devolver contenido como informaci√≥n general
            return KnowledgeSearchResult(
                information_found=content,
                source_type='unknown'
            )
            
    except Exception as e:
        print(f"‚ùå Error en knowledge_search: {e}")
        return KnowledgeSearchResult(
            clarification_message="Hubo un problema al buscar informaci√≥n. ¬øTe gustar√≠a hablar con un asesor?"
        )